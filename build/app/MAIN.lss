
MAIN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000144  2**0
                  ALLOC
  3 .stab         000006f0  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001081  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000018b5  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000249e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	02 d0       	rcall	.+4      	; 0x8a <main>
  86:	22 c0       	rjmp	.+68     	; 0xcc <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <main>:
#include <util/delay.h>
#include "adc.h"

int main(void)
{
    DDRB = 0xFF; // initialize port C
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	84 b9       	out	0x04, r24	; 4
    while (1)
    {   
        
        adc_get_status();
        PORTB ^= 1 << PINB5; // PC0 = High = Vcc
  8e:	10 e2       	ldi	r17, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	c0 e9       	ldi	r28, 0x90	; 144
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  92:	d1 e0       	ldi	r29, 0x01	; 1
  94:	14 d0       	rcall	.+40     	; 0xbe <adc_get_status>
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  96:	85 b1       	in	r24, 0x05	; 5
  98:	81 27       	eor	r24, r17
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	88 ee       	ldi	r24, 0xE8	; 232
  9e:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	fe 01       	movw	r30, r28
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x18>
  a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d9 f7       	brne	.-10     	; 0xa0 <main+0x16>
        _delay_ms(100);      // wait 500 milliseconds

        //LED off
        PORTB &= 0 << PINB5; // PC0 = Low = 0v
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	15 b8       	out	0x05, r1	; 5
  ae:	88 ee       	ldi	r24, 0xE8	; 232
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	fe 01       	movw	r30, r28
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x2a>
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	d9 f7       	brne	.-10     	; 0xb2 <main+0x28>
  bc:	eb cf       	rjmp	.-42     	; 0x94 <main+0xa>

000000be <adc_get_status>:
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  c4:	91 11       	cpse	r25, r1
  c6:	01 c0       	rjmp	.+2      	; 0xca <adc_get_status+0xc>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
