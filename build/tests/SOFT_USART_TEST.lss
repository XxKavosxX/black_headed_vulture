
SOFT_USART_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000684  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001081  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018fc  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000024d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	02 d0       	rcall	.+4      	; 0x7a <main>
  76:	8a c0       	rjmp	.+276    	; 0x18c <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <main>:
#include "soft_usart.h"
#include "util/delay.h"
int main()
{
    set_rx();
    set_tx();
  7a:	0d d0       	rcall	.+26     	; 0x96 <set_rx>
  7c:	0f d0       	rcall	.+30     	; 0x9c <set_tx>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	c0 e9       	ldi	r28, 0x90	; 144

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:

   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  80:	d1 e0       	ldi	r29, 0x01	; 1
  82:	81 e4       	ldi	r24, 0x41	; 65
  84:	0e d0       	rcall	.+28     	; 0xa2 <send_char>
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8a:	fe 01       	movw	r30, r28
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x12>
  90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  92:	d9 f7       	brne	.-10     	; 0x8a <main+0x10>
  94:	f6 cf       	rjmp	.-20     	; 0x82 <main+0x8>

00000096 <set_rx>:
  96:	52 98       	cbi	0x0a, 2	; 10
  98:	5a 9a       	sbi	0x0b, 2	; 11
  9a:	08 95       	ret

0000009c <set_tx>:
  9c:	5b 9a       	sbi	0x0b, 3	; 11
  9e:	53 9a       	sbi	0x0a, 3	; 10
  a0:	08 95       	ret

000000a2 <send_char>:
  a2:	5b 98       	cbi	0x0b, 3	; 11
  a4:	e4 ea       	ldi	r30, 0xA4	; 164
  a6:	f1 e0       	ldi	r31, 0x01	; 1
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <send_char+0x6>
  ac:	80 fd       	sbrc	r24, 0
  ae:	3b c0       	rjmp	.+118    	; 0x126 <send_char+0x84>
  b0:	5b 98       	cbi	0x0b, 3	; 11
  b2:	e4 ea       	ldi	r30, 0xA4	; 164
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <send_char+0x14>
  ba:	81 fd       	sbrc	r24, 1
  bc:	3b c0       	rjmp	.+118    	; 0x134 <send_char+0x92>
  be:	5b 98       	cbi	0x0b, 3	; 11
  c0:	e4 ea       	ldi	r30, 0xA4	; 164
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <send_char+0x22>
  c8:	82 fd       	sbrc	r24, 2
  ca:	3b c0       	rjmp	.+118    	; 0x142 <send_char+0xa0>
  cc:	5b 98       	cbi	0x0b, 3	; 11
  ce:	e4 ea       	ldi	r30, 0xA4	; 164
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <send_char+0x30>
  d6:	83 fd       	sbrc	r24, 3
  d8:	3b c0       	rjmp	.+118    	; 0x150 <send_char+0xae>
  da:	5b 98       	cbi	0x0b, 3	; 11
  dc:	e4 ea       	ldi	r30, 0xA4	; 164
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <send_char+0x3e>
  e4:	84 fd       	sbrc	r24, 4
  e6:	3b c0       	rjmp	.+118    	; 0x15e <send_char+0xbc>
  e8:	5b 98       	cbi	0x0b, 3	; 11
  ea:	e4 ea       	ldi	r30, 0xA4	; 164
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <send_char+0x4c>
  f2:	85 fd       	sbrc	r24, 5
  f4:	3b c0       	rjmp	.+118    	; 0x16c <send_char+0xca>
  f6:	5b 98       	cbi	0x0b, 3	; 11
  f8:	e4 ea       	ldi	r30, 0xA4	; 164
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <send_char+0x5a>
 100:	86 fd       	sbrc	r24, 6
 102:	3b c0       	rjmp	.+118    	; 0x17a <send_char+0xd8>
 104:	5b 98       	cbi	0x0b, 3	; 11
 106:	e4 ea       	ldi	r30, 0xA4	; 164
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <send_char+0x68>
 10e:	87 ff       	sbrs	r24, 7
 110:	3b c0       	rjmp	.+118    	; 0x188 <send_char+0xe6>
 112:	5b 9a       	sbi	0x0b, 3	; 11
 114:	84 ea       	ldi	r24, 0xA4	; 164
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	fc 01       	movw	r30, r24
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <send_char+0x78>
 11e:	5b 9a       	sbi	0x0b, 3	; 11
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <send_char+0x7e>
 124:	08 95       	ret
 126:	5b 9a       	sbi	0x0b, 3	; 11
 128:	e4 ea       	ldi	r30, 0xA4	; 164
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <send_char+0x8a>
 130:	81 ff       	sbrs	r24, 1
 132:	c5 cf       	rjmp	.-118    	; 0xbe <send_char+0x1c>
 134:	5b 9a       	sbi	0x0b, 3	; 11
 136:	e4 ea       	ldi	r30, 0xA4	; 164
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <send_char+0x98>
 13e:	82 ff       	sbrs	r24, 2
 140:	c5 cf       	rjmp	.-118    	; 0xcc <send_char+0x2a>
 142:	5b 9a       	sbi	0x0b, 3	; 11
 144:	e4 ea       	ldi	r30, 0xA4	; 164
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <send_char+0xa6>
 14c:	83 ff       	sbrs	r24, 3
 14e:	c5 cf       	rjmp	.-118    	; 0xda <send_char+0x38>
 150:	5b 9a       	sbi	0x0b, 3	; 11
 152:	e4 ea       	ldi	r30, 0xA4	; 164
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <send_char+0xb4>
 15a:	84 ff       	sbrs	r24, 4
 15c:	c5 cf       	rjmp	.-118    	; 0xe8 <send_char+0x46>
 15e:	5b 9a       	sbi	0x0b, 3	; 11
 160:	e4 ea       	ldi	r30, 0xA4	; 164
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <send_char+0xc2>
 168:	85 ff       	sbrs	r24, 5
 16a:	c5 cf       	rjmp	.-118    	; 0xf6 <send_char+0x54>
 16c:	5b 9a       	sbi	0x0b, 3	; 11
 16e:	e4 ea       	ldi	r30, 0xA4	; 164
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <send_char+0xd0>
 176:	86 ff       	sbrs	r24, 6
 178:	c5 cf       	rjmp	.-118    	; 0x104 <send_char+0x62>
 17a:	5b 9a       	sbi	0x0b, 3	; 11
 17c:	e4 ea       	ldi	r30, 0xA4	; 164
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <send_char+0xde>
 184:	87 fd       	sbrc	r24, 7
 186:	c5 cf       	rjmp	.-118    	; 0x112 <send_char+0x70>
 188:	5b 98       	cbi	0x0b, 3	; 11
 18a:	c4 cf       	rjmp	.-120    	; 0x114 <send_char+0x72>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
