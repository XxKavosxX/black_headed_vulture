
SOFT_USART_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  00800100  00800100  000002ce  2**0
                  ALLOC
  3 .stab         0000075c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b8  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  0000212c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000026ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	75 c0       	rjmp	.+234    	; 0x100 <__vector_5>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 39       	cpi	r26, 0x98	; 152
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	20 d0       	rcall	.+64     	; 0xc6 <main>
  86:	e7 c0       	rjmp	.+462    	; 0x256 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <test_recv2>:
        _delay_ms(10);
    }
}
void test_recv2(){

    softuart_config(2,3);
  8a:	63 e0       	ldi	r22, 0x03	; 3
  8c:	82 e0       	ldi	r24, 0x02	; 2
    softuart_enable_recv();
  8e:	27 d0       	rcall	.+78     	; 0xde <softuart_config>
    usart_enable(MYUBRR);
  90:	2b d0       	rcall	.+86     	; 0xe8 <softuart_enable_recv>
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	ba d0       	rcall	.+372    	; 0x20c <usart_enable>

#if !defined(__DOXYGEN__)
static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
#endif

  98:	c0 e9       	ldi	r28, 0x90	; 144
  9a:	d1 e0       	ldi	r29, 0x01	; 1

#include <inttypes.h>

#if !defined(__DOXYGEN__)
static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
  9c:	04 e6       	ldi	r16, 0x64	; 100
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	17 d0       	rcall	.+46     	; 0xd0 <softuart_get_buffer>
  a2:	ca d0       	rcall	.+404    	; 0x238 <usart_write>
  a4:	88 e8       	ldi	r24, 0x88	; 136
  a6:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	fe 01       	movw	r30, r28
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <test_recv2+0x20>
  ae:	01 97       	sbiw	r24, 0x01	; 1

#if !defined(__DOXYGEN__)
static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
#endif

  b0:	d9 f7       	brne	.-10     	; 0xa8 <test_recv2+0x1e>
  b2:	80 2f       	mov	r24, r16
  b4:	ba d0       	rcall	.+372    	; 0x22a <usart_send>
  b6:	88 e8       	ldi	r24, 0x88	; 136
  b8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	fe 01       	movw	r30, r28
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <test_recv2+0x32>
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <test_recv2+0x30>
  c4:	ed cf       	rjmp	.-38     	; 0xa0 <test_recv2+0x16>

000000c6 <main>:
#include "soft_usart.h"
#include "util/delay.h"
#include "usart.h"
int main()
{
  c6:	e1 df       	rcall	.-62     	; 0x8a <test_recv2>

000000c8 <softuart_get_heap>:
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  cc:	80 5d       	subi	r24, 0xD0	; 208
  ce:	08 95       	ret

000000d0 <softuart_get_buffer>:
  d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rx_listening>
  d4:	81 11       	cpse	r24, r1
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <softuart_get_buffer>
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	08 95       	ret

000000de <softuart_config>:
  de:	52 98       	cbi	0x0a, 2	; 10
  e0:	5a 9a       	sbi	0x0b, 2	; 11
  e2:	5b 9a       	sbi	0x0b, 3	; 11
  e4:	53 9a       	sbi	0x0a, 3	; 10
  e6:	08 95       	ret

000000e8 <softuart_enable_recv>:
  e8:	78 94       	sei
  ea:	e8 e6       	ldi	r30, 0x68	; 104
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	80 83       	st	Z, r24
  f4:	ed e6       	ldi	r30, 0x6D	; 109
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	84 60       	ori	r24, 0x04	; 4
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <__vector_5>:
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
 118:	4a 9b       	sbis	0x09, 2	; 9
 11a:	0c c0       	rjmp	.+24     	; 0x134 <__vector_5+0x34>
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti
 134:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 138:	8b 7f       	andi	r24, 0xFB	; 251
 13a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rx_listening>
 144:	e0 ed       	ldi	r30, 0xD0	; 208
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	cf 01       	movw	r24, r30
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <__vector_5+0x4a>
 14e:	89 b1       	in	r24, 0x09	; 9
 150:	82 fb       	bst	r24, 2
 152:	88 27       	eor	r24, r24
 154:	80 f9       	bld	r24, 0
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <__vector_5+0x56>
 15a:	4a 99       	sbic	0x09, 2	; 9
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	e0 ed       	ldi	r30, 0xD0	; 208
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <__vector_5+0x62>
 166:	4a 99       	sbic	0x09, 2	; 9
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	e0 ed       	ldi	r30, 0xD0	; 208
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <__vector_5+0x6e>
 172:	4a 99       	sbic	0x09, 2	; 9
 174:	88 60       	ori	r24, 0x08	; 8
 176:	e0 ed       	ldi	r30, 0xD0	; 208
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <__vector_5+0x7a>
 17e:	4a 99       	sbic	0x09, 2	; 9
 180:	80 61       	ori	r24, 0x10	; 16
 182:	e0 ed       	ldi	r30, 0xD0	; 208
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <__vector_5+0x86>
 18a:	4a 99       	sbic	0x09, 2	; 9
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	e0 ed       	ldi	r30, 0xD0	; 208
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <__vector_5+0x92>
 196:	4a 99       	sbic	0x09, 2	; 9
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	e0 ed       	ldi	r30, 0xD0	; 208
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <__vector_5+0x9e>
 1a2:	4a 99       	sbic	0x09, 2	; 9
 1a4:	22 c0       	rjmp	.+68     	; 0x1ea <__vector_5+0xea>
 1a6:	e0 ed       	ldi	r30, 0xD0	; 208
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <__vector_5+0xaa>
 1ae:	9a e6       	ldi	r25, 0x6A	; 106
 1b0:	9a 95       	dec	r25
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <__vector_5+0xb0>
 1b4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1b8:	99 23       	and	r25, r25
 1ba:	d9 f0       	breq	.+54     	; 0x1f2 <__vector_5+0xf2>
 1bc:	e9 2f       	mov	r30, r25
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 5f       	subi	r30, 0xFE	; 254
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	80 83       	st	Z, r24
 1c6:	9f 5f       	subi	r25, 0xFF	; 255
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	96 39       	cpi	r25, 0x96	; 150
 1cc:	80 f0       	brcs	.+32     	; 0x1ee <__vector_5+0xee>
 1ce:	ba e6       	ldi	r27, 0x6A	; 106
 1d0:	8b 9f       	mul	r24, r27
 1d2:	90 0d       	add	r25, r0
 1d4:	11 24       	eor	r1, r1
 1d6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1da:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 1e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rx_listening>
 1e8:	99 cf       	rjmp	.-206    	; 0x11c <__vector_5+0x1c>
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	dc cf       	rjmp	.-72     	; 0x1a6 <__vector_5+0xa6>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	ee cf       	rjmp	.-36     	; 0x1ce <__vector_5+0xce>
 1f2:	96 e9       	ldi	r25, 0x96	; 150
 1f4:	e2 e0       	ldi	r30, 0x02	; 2
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	df 01       	movw	r26, r30
 1fa:	1d 92       	st	X+, r1
 1fc:	9a 95       	dec	r25
 1fe:	e9 f7       	brne	.-6      	; 0x1fa <__vector_5+0xfa>
 200:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rx_buffer>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 20a:	e7 cf       	rjmp	.-50     	; 0x1da <__vector_5+0xda>

0000020c <usart_enable>:
 20c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 210:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 214:	e0 ec       	ldi	r30, 0xC0	; 192
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	10 82       	st	Z, r1
 21a:	10 82       	st	Z, r1
 21c:	88 e1       	ldi	r24, 0x18	; 24
 21e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 222:	8e e0       	ldi	r24, 0x0E	; 14
 224:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 228:	08 95       	ret

0000022a <usart_send>:
 22a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 22e:	95 ff       	sbrs	r25, 5
 230:	fc cf       	rjmp	.-8      	; 0x22a <usart_send>
 232:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 236:	08 95       	ret

00000238 <usart_write>:
 238:	fc 01       	movw	r30, r24
 23a:	20 81       	ld	r18, Z
 23c:	22 23       	and	r18, r18
 23e:	51 f0       	breq	.+20     	; 0x254 <usart_write+0x1c>
 240:	31 96       	adiw	r30, 0x01	; 1
 242:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 246:	95 ff       	sbrs	r25, 5
 248:	fc cf       	rjmp	.-8      	; 0x242 <usart_write+0xa>
 24a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 24e:	21 91       	ld	r18, Z+
 250:	21 11       	cpse	r18, r1
 252:	f7 cf       	rjmp	.-18     	; 0x242 <usart_write+0xa>
 254:	08 95       	ret

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
